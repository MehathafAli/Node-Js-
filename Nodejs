const express = require('express')
const path = require('path')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const app = express()
const dbpath = path.join(__dirname, 'moviesData.db')
let db = null
app.use(express.json())
const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbpath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}
initializeDBAndServer()
const convertMovieobjtoResponseobj = dbobject => {
  return {
    movieId: dbobject.movie_id,
    directorId: dbobject.director_id,
    movieName: dbobject.movie_name,
    leadActor: dbobject.lead_actorm,
  }
}

const convertDirectorobjtoResponseobj = dbobject => {
  return {
    directorId: dbobject.director_id,
    directorName: dbobject.director_name,
  }
}

app.get('/movies/', async (request, response) => {
  const getmoviequery = `select movie_name from movie;`
  const movieArray = await db.all(getmoviequery)
  response.send(
    movieArray.map(eachmovie => ({movieName: eachmovie.movie_name})),
  )
})

app.get('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const getmoviequery = `select * from movie where movie_id=${movieId}`
  const movie = await db.get(getmoviequery)
  response.send(convertDirectorobjtoResponseobj(movie))
})

app.post('/movies/', async (request, response) => {
  const {directorId, movieName, leadActor} = request.body
  const postmoviequery = `insert into 
           movie  (director_id,movie_name,lead_actor)
           values
           (${directorId},'${movieName}','${leadActor}')`
  await db.run(postmoviequery)
  response.send('Movie Successfully Added')
})

app.put('/movies/:movieId/', async (request, response) => {
  const {directorId, movieName, leadActor} = request.body
  const {movieId} = request.params
  const updatemoviequery = `UPDATE movie
    SET  
        director_id=${directorId},
        movie_name='${movieName}',
        lead_actor='${leadActor}' 
    WHERE movie_id=${movieId};`
  await db.run(updatemoviequery)
  response.send('Movie Details Updated')
})

app.delete('/movies/:movieId/', async (request, response) => {
  const {movieId} = request.params
  const deletemoviequery = `Delete from movie
             where movie_id=${movieId} `

  await db.run(deletemoviequery)
  response.send('Movie Removed')
})

app.get('/directors/', async (request, response) => {
  const getDirectorquery = `select * from director;`
  const directorArray = await db.all(getDirectorquery)
  response.send(
    directorArray.map(eachmovie => convertDirectorobjtoResponseobj(eachmovie)),
  )
})

app.get('/directors/:directorId/movies/', async (request, response) => {
  const {directorId} = request.params
  const getDirectormoviequery = `select movie_name from movie
                          where director_id=${directorId}`
  const movieArray = await db.all(getDirectormoviequery)
  response.send(
    movieArray.map(eachmovie => ({movieName: eachmovie.movie_name})),
  )
})

module.exports = app
